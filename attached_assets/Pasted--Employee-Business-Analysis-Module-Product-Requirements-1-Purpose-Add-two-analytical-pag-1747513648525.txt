# Employee & Business Analysis Module – Product Requirements

## 1 · Purpose

Add two analytical pages – **Employee Analysis** and **Business Line Analysis** – that tap into the existing *Monthly Analytics* dataset to visualise revenue, expenses and net income overall **and** drill‑down profitability for individual employees or business lines ("E" vs "O" uploads).  Both pages share a near‑identical UI skeleton so they can re‑use components and queries.

## 2 · Success Metrics

| KPI                                                                            | Target |
| ------------------------------------------------------------------------------ | ------ |
| Page load < 1.5 s (95‑pctl)                                                    | ✔︎     |
| API response < 400 ms for filter queries                                       | ✔︎     |
| Interactive filter (select employee/line) → chart refresh < 300 ms             | ✔︎     |
| User can answer “Which doctor generated the highest net in March?” inside 10 s | ✔︎     |

## 3 · Data Model Source

All data is derived **server‑side** from existing tables:

* `monthly_financial_data` – totals per month.
* `doctor_performance` – per‑employee monthly figures.
* `department_performance` – per‑business (“O”) monthly figures.

> No new tables required – we expose **parametrised views** via new endpoints.

## 4 · API Endpoints

| Method | Path                            | Query Params               | Returns                                        |
| ------ | ------------------------------- | -------------------------- | ---------------------------------------------- |
| GET    | /api/analytics/employee/summary | `from`, `to`               | \[{ month, revenue, expense, net }]            |
| GET    | /api/analytics/employee/detail  | `employeeId`, `from`, `to` | \[{ month, revenue, expense, net, marginPct }] |
| GET    | /api/analytics/business/summary | `from`, `to`               | same shape as above                            |
| GET    | /api/analytics/business/detail  | `businessId`, …            | idem                                           |

Implementation: `financial-data-manager.ts` gains helpers `getEmployeeSummary`, `getEmployeeDetail`, `getBusinessSummary`, `getBusinessDetail`.  Use **parameterised SQL** so row‑level filters require only an index on `(clinic_id, month)`.

## 5 · State & Caching

* React‑Query keys:

  * `['emp-summary', from, to]`
  * `['emp-detail', id, from, to]`
  * `['biz-summary', …]`, `['biz-detail', …]`
* 12 h *staleTime*; filters invalidate corresponding keys.
* Zustand slice `analysisFilters` to hold: `range`, `selectedEmployee`, `selectedBusiness`.

## 6 · UI/UX Layout

```
┌────────────────────────── Employee Analysis ──────────────────────────┐
│ ①  Filters   [Date‑range] [Employee combo]                            │
├───────────────────────────────────────────────────────────────────────┤
│ ②  KPI Cards  Total Rev | Total Exp | Net  (current range)           │
├───────────────────────────────────────────────────────────────────────┤
│ ③  Bar Chart  (stacked / grouped)  Rev vs Exp vs Net  by  Month      │
├───────────────────────────────────────────────────────────────────────┤
│ ④  Profitability Chart  → If *All* selected = horizontal bar showing  │
│     each employee’s Net Contribution.  If one selected = mini line   │
│     chart of margin% trend.                                          │
├───────────────────────────────────────────────────────────────────────┤
│ ⑤  Data Table (paginated)  Month | Rev | Exp | Net | Margin%          │
└───────────────────────────────────────────────────────────────────────┘
```

*Business Analysis* swaps Employee combo for Business Line combo but is otherwise identical.

## 7 · Components (re‑use first!)

| Component              | Description                                                                                                                                                                 |
| ---------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| `<FiltersBar>`         | Date range picker (shadcn `<CalendarRangePicker>`), SelectDropdown (react‑select) populated from `/api/analytics/employee/list`.  Calls `analysisFilters.set()` in Zustand. |
| `<KpiCard>` (existing) | Already in Dashboard – re‑use.                                                                                                                                              |
| `<MonthlyBarChart>`    | Wrapper around `react-chartjs-2` Bar.  Props: `data`, `labels`.  Accept `groupMode = "stack" \| "group"`.                                                                   |
| `<ProfitabilityChart>` | When *All* → HorizontalBar (total net by entity); when one selected → Line chart of `marginPct`.                                                                            |
| `<AnalysisTable>`      | Plain Tailwind table, export CSV.                                                                                                                                           |

## 8 · Filtering Logic

1. On page mount, call summary endpoint with default range (rolling 12 months) & `entityId = null`.
2. When user picks an entity, parallel‑fetch **detail** endpoint; charts/tables swap to detail data.
3. Removing selection reverts to summary dataset.

## 9 · Technical Tasks

### Backend

* [ ] Add four endpoints with validation (zod) & Drizzle queries.
* [ ] Unit‑tests via **Vitest + supertest** for SQL correctness.
* [ ] Seed `doctor_performance` & `department_performance` with backfill job if historical months missing.

### Frontend

* [ ] Generate scaffolding pages `pages/employee-analysis.tsx`, `pages/business-analysis.tsx`.
* [ ] Build shared components in `components/analysis/`.
* [ ] Hook state slice `analysisFilters` → outer context.
* [ ] Integrate React‑Query calls & suspense loading skeletons.
* [ ] Accessibility audit (color contrasts for charts, aria‑labels on dropdowns).

### DevOps

* [ ] Add `/api/analytics/**` to nginx/ingress allowlist.
* [ ] Extend GitHub Actions CI with new test matrix.

## 10 · Acceptance Criteria

1. Selecting an employee instantly updates both charts & table.
2. Selecting a business line does the same on Business page.
3. Export CSV respects current filters.
4. No console errors nor React‑Query retries in Lighthouse run.
5. Back‑end queries never scan full tables (checked via `EXPLAIN`).

## 11 · Future Extensions

* Cohort comparison mode (multi‑select entities, unique colors).
* Overlay budget targets once budget CSV integrated.
* Push chart images into quarterly board decks via /export/png endpoint.

---

**Owner:** Brett G. ⋅ **Tech lead:** (assign) ⋅ **Design:** (optional) ⋅ **ETA:** 1 week MVP
