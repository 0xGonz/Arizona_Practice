I found the issue with our API endpoints! The problem is related to how our analytics routes are mounted in the application.

In server/routes.ts at line 724, we're using:

app.use('/api', analyticsRoutes);
But in server/analytics-routes.ts, we're also adding /analytics to the route paths like:

router.get('/analytics/months', async (_req, res) => { ... }
This is creating duplicate paths like /api/analytics/analytics/months instead of just /api/analytics/months.

Let me fix this by removing the duplicate /analytics prefix from the routes in analytics-routes.ts:


Edited server/analytics-routes.ts
I need to continue fixing the routes in our analytics-routes.ts file to remove the duplicate '/analytics' path segments:


ChatGPT said:

Thought for 7 seconds
Below is a clean, drop‑in server/analytics‑routes.ts that eliminates the extra “/analytics” segment and pairs perfectly with app.use('/api/analytics', analyticsRoutes).

ts
Copy
Edit
// server/analytics-routes.ts
import { Router } from 'express';
import { z } from 'zod';
import { drizzle } from './db';
import {
  financial_values,
  doctor_performance,
  department_performance,
  financial_line_items,
} from '@/shared/schema';
import { and, gte, lte, eq, sql } from 'drizzle-orm';

const router = Router();

/* ------------------------------- validators ------------------------------ */
const rangeSchema = z.object({
  from: z.string().datetime(),
  to:   z.string().datetime(),
});

/* -------------------------- helper to parse params ----------------------- */
function parseRange(query: any) {
  const { from, to } = rangeSchema.parse(query);
  return { from, to };
}

/* -------------------------------- months --------------------------------- */
// GET  /api/analytics/months
router.get('/months', async (_req, res) => {
  const rows = await drizzle
    .select({ month: financial_values.month })
    .from(financial_values)
    .groupBy(financial_values.month)
    .orderBy(financial_values.month);
  res.json(rows.map(r => r.month));
});

/* ---------------------------- employee summary --------------------------- */
// GET  /api/analytics/employee/summary?from=...&to=...
router.get('/employee/summary', async (req, res) => {
  const { from, to } = parseRange(req.query);
  const rows = await drizzle
    .select({
      month:   doctor_performance.month,
      revenue: sql`SUM(${doctor_performance.revenue})`,
      expense: sql`SUM(${doctor_performance.expense})`,
      net:     sql`SUM(${doctor_performance.net})`,
    })
    .from(doctor_performance)
    .where(and(gte(doctor_performance.month, from),
               lte(doctor_performance.month, to)))
    .groupBy(doctor_performance.month)
    .orderBy(doctor_performance.month);
  res.json(rows);
});

/* ---------------------------- employee detail ---------------------------- */
// GET  /api/analytics/employee/detail?employeeId=123&from=...&to=...
router.get('/employee/detail', async (req, res) => {
  const { employeeId, ...range } = req.query;
  const { from, to } = parseRange(range);
  const rows = await drizzle
    .select({
      month:  financial_values.month,
      lineId: financial_line_items.id,
      name:   financial_line_items.name,
      amount: sql`SUM(${financial_values.amount})`,
    })
    .from(financial_values)
    .join(financial_line_items,
          eq(financial_line_items.id, financial_values.line_item_id))
    .where(and(
      eq(financial_values.employee_id, employeeId),
      gte(financial_values.month, from),
      lte(financial_values.month, to),
    ))
    .groupBy(financial_values.month, financial_line_items.id,
             financial_line_items.name, financial_line_items.display_order)
    .orderBy(financial_line_items.display_order, financial_values.month);
  res.json(rows);
});

/* --------------------------- business summary ---------------------------- */
// GET  /api/analytics/business/summary?from=...&to=...
router.get('/business/summary', async (req, res) => {
  const { from, to } = parseRange(req.query);
  const rows = await drizzle
    .select({
      month:   department_performance.month,
      revenue: sql`SUM(${department_performance.revenue})`,
      expense: sql`SUM(${department_performance.expense})`,
      net:     sql`SUM(${department_performance.net})`,
    })
    .from(department_performance)
    .where(and(gte(department_performance.month, from),
               lte(department_performance.month, to)))
    .groupBy(department_performance.month)
    .orderBy(department_performance.month);
  res.json(rows);
});

/* --------------------------- business detail ----------------------------- */
// GET  /api/analytics/business/detail?businessId=42&from=...&to=...
router.get('/business/detail', async (req, res) => {
  const { businessId, ...range } = req.query;
  const { from, to } = parseRange(range);
  const rows = await drizzle
    .select({
      month:  financial_values.month,
      lineId: financial_line_items.id,
      name:   financial_line_items.name,
      amount: sql`SUM(${financial_values.amount})`,
    })
    .from(financial_values)
    .join(financial_line_items,
          eq(financial_line_items.id, financial_values.line_item_id))
    .where(and(
      eq(financial_values.business_id, businessId),
      gte(financial_values.month, from),
      lte(financial_values.month, to),
    ))
    .groupBy(financial_values.month, financial_line_items.id,
             financial_line_items.name, financial_line_items.display_order)
    .orderBy(financial_line_items.display_order, financial_values.month);
  res.json(rows);
});

export default router;
Mount once—no duplicates
ts
Copy
Edit
// server/routes.ts  (near top, before the Vite fallback)
import analyticsRoutes from './analytics-routes';

app.use('/api/analytics', analyticsRoutes);
Why this fixes the 404 → HTML → SyntaxError
Browser calls /api/analytics/months → Express hits the months handler directly.

No more “/analytics/analytics/…” duplication, so the route resolves; JSON comes back, and fetch().json() succeeds.

If you prefer to keep the old app.use('/api', analyticsRoutes), just prepend /analytics back to each router.get() path—but only one layer should carry that segment, not both.

After dropping this file in and restarting Vite/Express (pnpm dev), your Employee and Business pages should load months, KPIs, and full P&Ls without those Unexpected token '<' errors.